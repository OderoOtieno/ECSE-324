
P:/ECSE324/G39_Lab3/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 f0 08 00 00 f4 08 00 00 f8 08 00 00     @...............
  30:	fc 08 00 00 ec 08 00 00 00 09 00 00 04 09 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001eb 	bl	888 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	000009ec 	.word	0x000009ec

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffffc 	.word	0x3ffffffc
 120:	00000e28 	.word	0x00000e28

00000124 <__cs3_heap_start_ptr>:
 124:	00000e50 	.word	0x00000e50

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffffc 	.word	0x3ffffffc

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000e30 	.word	0x00000e30
 170:	00000e33 	.word	0x00000e33
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000e30 	.word	0x00000e30
 1bc:	00000e30 	.word	0x00000e30
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000e30 	.word	0x00000e30
 200:	00000000 	.word	0x00000000
 204:	00000990 	.word	0x00000990

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000990 	.word	0x00000990
 250:	00000e34 	.word	0x00000e34
 254:	000009f0 	.word	0x000009f0
 258:	00000000 	.word	0x00000000

0000025c <main>:

#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/pushbuttons.h"

int main(){
 25c:	e92d40f8 	push	{r3, r4, r5, r6, r7, lr}
	while(1){
		int num =read_slider_switches_ASM();
		write_LEDs_ASM(num);
		int disp = read_PB_data_ASM();
		if(num==0x00000200){
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 260:	e3a0703f 	mov	r7, #63	; 0x3f
		}else{
			HEX_clear_ASM(disp);
			HEX_flood_ASM(HEX4 | HEX5);
 264:	e3a06030 	mov	r6, #48	; 0x30
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/pushbuttons.h"

int main(){
	while(1){
		int num =read_slider_switches_ASM();
 268:	eb000010 	bl	2b0 <read_slider_switches_ASM>
 26c:	e1a04000 	mov	r4, r0
		write_LEDs_ASM(num);
 270:	eb000017 	bl	2d4 <write_LEDs_ASM>
		int disp = read_PB_data_ASM();
 274:	eb0000ad 	bl	530 <read_PB_data_ASM>
		if(num==0x00000200){
 278:	e3540c02 	cmp	r4, #512	; 0x200
 27c:	1a000002 	bne	28c <main+0x30>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 280:	e1a00007 	mov	r0, r7
 284:	eb00002d 	bl	340 <HEX_clear_ASM>
 288:	eafffff6 	b	268 <main+0xc>
		}else{
			HEX_clear_ASM(disp);
 28c:	e6ef5070 	uxtb	r5, r0
 290:	e1a00005 	mov	r0, r5
 294:	eb000029 	bl	340 <HEX_clear_ASM>
			HEX_flood_ASM(HEX4 | HEX5);
 298:	e1a00006 	mov	r0, r6
 29c:	eb000010 	bl	2e4 <HEX_flood_ASM>
			HEX_write_ASM(disp,num);
 2a0:	e1a00005 	mov	r0, r5
 2a4:	e6ef1074 	uxtb	r1, r4
 2a8:	eb00003c 	bl	3a0 <HEX_write_ASM>
 2ac:	eaffffed 	b	268 <main+0xc>

000002b0 <read_slider_switches_ASM>:
		.text
		.equ SW_BASE, 0xFF200040
		
		.global read_slider_switches_ASM
		
read_slider_switches_ASM:	PUSH {R1}
 2b0:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
							LDR R1,=SW_BASE
 2b4:	e59f1008 	ldr	r1, [pc, #8]	; 2c4 <read_slider_switches_ASM+0x14>
							LDR R0,[R1]
 2b8:	e5910000 	ldr	r0, [r1]
							POP {R1}
 2bc:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
							BX LR
 2c0:	e12fff1e 	bx	lr
		.equ SW_BASE, 0xFF200040
		
		.global read_slider_switches_ASM
		
read_slider_switches_ASM:	PUSH {R1}
							LDR R1,=SW_BASE
 2c4:	ff200040 	.word	0xff200040

000002c8 <read_LEDs_ASM>:
		.global read_LEDs_ASM
		.global write_LEDs_ASM


		
read_LEDs_ASM:	LDR R1,=LED_BASE
 2c8:	e59f1010 	ldr	r1, [pc, #16]	; 2e0 <write_LEDs_ASM+0xc>
				LDR R0, [R1]
 2cc:	e5910000 	ldr	r0, [r1]
				BX LR
 2d0:	e12fff1e 	bx	lr

000002d4 <write_LEDs_ASM>:

				//.end    report challenge				
//R0 hasnt been overwritten from subroutine and contains the address that contains all switches clicked
write_LEDs_ASM:	LDR R1,=LED_BASE
 2d4:	e59f1004 	ldr	r1, [pc, #4]	; 2e0 <write_LEDs_ASM+0xc>
				STR R0,[R1]
 2d8:	e5810000 	str	r0, [r1]
				BX LR
 2dc:	e12fff1e 	bx	lr
		.global read_LEDs_ASM
		.global write_LEDs_ASM


		
read_LEDs_ASM:	LDR R1,=LED_BASE
 2e0:	ff200000 	.word	0xff200000

000002e4 <HEX_flood_ASM>:


//FLOOD the display

HEX_flood_ASM:  //R0 has the input value
				PUSH {R0-R6,LR}
 2e4:	e92d407f 	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                LDR R1, =HEX_BASE_ONE //R1 will have the base address of the display
 2e8:	e59f1238 	ldr	r1, [pc, #568]	; 528 <DONEWRITE+0x8>
                MOV R2,#0 //The counter for the display
 2ec:	e3a02000 	mov	r2, #0
                MOV R3,#0xFF //The value to light up all display
 2f0:	e3a030ff 	mov	r3, #255	; 0xff
                MOV R4,#0 // Will hold value of the current displays being lit
 2f4:	e3a04000 	mov	r4, #0

000002f8 <FLOOD_LOOP>:


FLOOD_LOOP:     CMP R2, #4
 2f8:	e3520004 	cmp	r2, #4
                LDREQ R1, =HEX_BASE_TWO
 2fc:	059f1228 	ldreq	r1, [pc, #552]	; 52c <DONEWRITE+0xc>
                MOVEQ R3,#0xFF
 300:	03a030ff 	moveq	r3, #255	; 0xff

				CMP R2,#6
 304:	e3520006 	cmp	r2, #6
				BEQ DONEFLOOD
 308:	0a00000a 	beq	338 <DONEFLOOD>

                AND R5,R0,#1 //checks R5 will hold the result if the LSB is 1
 30c:	e2005001 	and	r5, r0, #1
				ASR R0,R0,#1
 310:	e1a000c0 	asr	r0, r0, #1
                CMP R5,#0 //If the LSB is off jump to SHIFT_TO_NEXT_DISPLAY
 314:	e3550000 	cmp	r5, #0
                BEQ SHIFT_TO_NEXT_DISPLAY
 318:	0a000003 	beq	32c <SHIFT_TO_NEXT_DISPLAY>

                //If the LSB is ON, write to the address to turn it ON
                LDR R6,[R1]
 31c:	e5916000 	ldr	r6, [r1]
                ORR R6,R6,R3
 320:	e1866003 	orr	r6, r6, r3
				STR R6,[R1]
 324:	e5816000 	str	r6, [r1]

                B SHIFT_TO_NEXT_DISPLAY 
 328:	eaffffff 	b	32c <SHIFT_TO_NEXT_DISPLAY>

0000032c <SHIFT_TO_NEXT_DISPLAY>:




SHIFT_TO_NEXT_DISPLAY:  LSL R3,#8
 32c:	e1a03403 	lsl	r3, r3, #8
                        ADD R2, R2, #1
 330:	e2822001 	add	r2, r2, #1
						B FLOOD_LOOP
 334:	eaffffef 	b	2f8 <FLOOD_LOOP>

00000338 <DONEFLOOD>:

DONEFLOOD:	POP {R0-R6,LR}
 338:	e8bd407f 	pop	{r0, r1, r2, r3, r4, r5, r6, lr}
			BX LR
 33c:	e12fff1e 	bx	lr

00000340 <HEX_clear_ASM>:


//Clear Display

HEX_clear_ASM:  //R0 has the input value
				PUSH {R0-R7,LR}
 340:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
                LDR R1, =HEX_BASE_ONE //R1 will have the base address of the display
 344:	e59f11dc 	ldr	r1, [pc, #476]	; 528 <DONEWRITE+0x8>
                MOV R2,#0 //The counter for the display
 348:	e3a02000 	mov	r2, #0
                MOV R3,#0xFF //The value to light up all display
 34c:	e3a030ff 	mov	r3, #255	; 0xff
                MOV R4,#0 // Will hold value of the current displays being lit
 350:	e3a04000 	mov	r4, #0

00000354 <CLEAR_LOOP>:


CLEAR_LOOP:     CMP R2, #4
 354:	e3520004 	cmp	r2, #4

// not sure from here
                LDREQ R1, =HEX_BASE_TWO
 358:	059f11cc 	ldreq	r1, [pc, #460]	; 52c <DONEWRITE+0xc>
                MOVEQ R3,#0xFF
 35c:	03a030ff 	moveq	r3, #255	; 0xff

				CMP R2,#6
 360:	e3520006 	cmp	r2, #6
				BEQ DONECLEAR
 364:	0a00000b 	beq	398 <DONECLEAR>
//to here

                AND R5,R0,#1 //checks R5 will hold the result if the LSB is 1
 368:	e2005001 	and	r5, r0, #1
				ASR R0,R0,#1
 36c:	e1a000c0 	asr	r0, r0, #1
                CMP R5,#0 //If the LSB is off jump to SHIFT_TO_NEXT_DISPLAY
 370:	e3550000 	cmp	r5, #0
                BEQ CLEAR_NEXT_DISPLAY
 374:	0a000004 	beq	38c <CLEAR_NEXT_DISPLAY>

                //If the LSB is ON, write to the address to turn it ON
                LDR R6,[R1]
 378:	e5916000 	ldr	r6, [r1]
				MVN R7,R3
 37c:	e1e07003 	mvn	r7, r3
                AND R6,R6,R7
 380:	e0066007 	and	r6, r6, r7
				STR R6,[R1]
 384:	e5816000 	str	r6, [r1]

                B CLEAR_NEXT_DISPLAY
 388:	eaffffff 	b	38c <CLEAR_NEXT_DISPLAY>

0000038c <CLEAR_NEXT_DISPLAY>:


CLEAR_NEXT_DISPLAY:  LSL R3,#8
 38c:	e1a03403 	lsl	r3, r3, #8
                        ADD R2, R2, #1
 390:	e2822001 	add	r2, r2, #1
						B CLEAR_LOOP
 394:	eaffffee 	b	354 <CLEAR_LOOP>

00000398 <DONECLEAR>:

DONECLEAR:		POP {R0-R7,LR}
 398:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
				BX LR
 39c:	e12fff1e 	bx	lr

000003a0 <HEX_write_ASM>:



//Write to display
HEX_write_ASM: //assume R0 and R1 have argument 1 and argument 2
				PUSH {R0-R7,LR}
 3a0:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}

				CMP R1, #0
 3a4:	e3510000 	cmp	r1, #0
				BEQ IS_ZERO //move to 0 branch
 3a8:	0a000029 	beq	454 <IS_ZERO>

				CMP R1, #1
 3ac:	e3510001 	cmp	r1, #1
				BEQ IS_ONE//move to 1 branch
 3b0:	0a000029 	beq	45c <IS_ONE>

				CMP R1, #2
 3b4:	e3510002 	cmp	r1, #2
				BEQ IS_TWO//move to 2 branch
 3b8:	0a000029 	beq	464 <IS_TWO>

				CMP R1, #3
 3bc:	e3510003 	cmp	r1, #3
				BEQ IS_THREE//move to 3 branch
 3c0:	0a000029 	beq	46c <IS_THREE>


				CMP R1, #4
 3c4:	e3510004 	cmp	r1, #4
				BEQ IS_FOUR//move to 4 branch
 3c8:	0a000029 	beq	474 <IS_FOUR>

				CMP R1, #5
 3cc:	e3510005 	cmp	r1, #5
				BEQ IS_FIVE//move to 5 branch
 3d0:	0a000029 	beq	47c <IS_FIVE>
				
				CMP R1, #6
 3d4:	e3510006 	cmp	r1, #6
				BEQ IS_SIX//move to 6 branch
 3d8:	0a000029 	beq	484 <IS_SIX>
				
				CMP R1, #7
 3dc:	e3510007 	cmp	r1, #7
				BEQ IS_SEVEN//move to 7 branch
 3e0:	0a000029 	beq	48c <IS_SEVEN>

				CMP R1, #8
 3e4:	e3510008 	cmp	r1, #8
				BEQ IS_EIGHT//move to 8 branch
 3e8:	0a000029 	beq	494 <IS_EIGHT>

				CMP R1, #9
 3ec:	e3510009 	cmp	r1, #9
				BEQ IS_NINE//move to 9 branch
 3f0:	0a000029 	beq	49c <IS_NINE>
				
				CMP R1, #0xA
 3f4:	e351000a 	cmp	r1, #10
				BEQ IS_TEN//move to A branch, Follwing we will implenment two sets of rules, i.e., input "10" as well as 'A' will both show "A"
 3f8:	0a000029 	beq	4a4 <IS_TEN>
				CMP R1, #0x41
 3fc:	e3510041 	cmp	r1, #65	; 0x41
				BEQ IS_TEN//move to 0 branch
 400:	0a000027 	beq	4a4 <IS_TEN>

				CMP R1, #0xB
 404:	e351000b 	cmp	r1, #11
				BEQ IS_ELEVEN
 408:	0a000027 	beq	4ac <IS_ELEVEN>
				CMP R1, #0x42
 40c:	e3510042 	cmp	r1, #66	; 0x42
				BEQ IS_ELEVEN
 410:	0a000025 	beq	4ac <IS_ELEVEN>

				CMP R1, #0xC
 414:	e351000c 	cmp	r1, #12
				BEQ IS_TWELVE
 418:	0a000025 	beq	4b4 <IS_TWELVE>
				CMP R1, #0x43
 41c:	e3510043 	cmp	r1, #67	; 0x43
				BEQ IS_TWELVE
 420:	0a000023 	beq	4b4 <IS_TWELVE>


        		CMP R1, #0xD
 424:	e351000d 	cmp	r1, #13
				BEQ IS_THIRTEEN
 428:	0a000023 	beq	4bc <IS_THIRTEEN>
        		CMP R1, #0x44
 42c:	e3510044 	cmp	r1, #68	; 0x44
				BEQ IS_THIRTEEN
 430:	0a000021 	beq	4bc <IS_THIRTEEN>


        		CMP R1, #0xE
 434:	e351000e 	cmp	r1, #14
				BEQ IS_FOURTEEN
 438:	0a000021 	beq	4c4 <IS_FOURTEEN>
        		CMP R1, #0x45
 43c:	e3510045 	cmp	r1, #69	; 0x45
				BEQ IS_FOURTEEN
 440:	0a00001f 	beq	4c4 <IS_FOURTEEN>


        		CMP R1, #0xF
 444:	e351000f 	cmp	r1, #15
				BEQ IS_FIFTEEN
 448:	0a00001f 	beq	4cc <IS_FIFTEEN>
        		CMP R1, #0x46
 44c:	e3510046 	cmp	r1, #70	; 0x46
				BEQ IS_FIFTEEN
 450:	0a00001d 	beq	4cc <IS_FIFTEEN>

00000454 <IS_ZERO>:
 		

IS_ZERO: MOV R3,#0x3F
 454:	e3a0303f 	mov	r3, #63	; 0x3f
						B DISPLAY
 458:	ea00001d 	b	4d4 <DISPLAY>

0000045c <IS_ONE>:


IS_ONE: MOV R3,#0x06
 45c:	e3a03006 	mov	r3, #6
						B DISPLAY
 460:	ea00001b 	b	4d4 <DISPLAY>

00000464 <IS_TWO>:


IS_TWO:MOV R3,#0x5B
 464:	e3a0305b 	mov	r3, #91	; 0x5b
						B DISPLAY
 468:	ea000019 	b	4d4 <DISPLAY>

0000046c <IS_THREE>:


IS_THREE:MOV R3,#0x4F
 46c:	e3a0304f 	mov	r3, #79	; 0x4f
						B DISPLAY
 470:	ea000017 	b	4d4 <DISPLAY>

00000474 <IS_FOUR>:


IS_FOUR:MOV R3,#0x66
 474:	e3a03066 	mov	r3, #102	; 0x66
						B DISPLAY
 478:	ea000015 	b	4d4 <DISPLAY>

0000047c <IS_FIVE>:


IS_FIVE:MOV R3,#0x6D
 47c:	e3a0306d 	mov	r3, #109	; 0x6d
						B DISPLAY
 480:	ea000013 	b	4d4 <DISPLAY>

00000484 <IS_SIX>:


IS_SIX:MOV R3,#0x7D
 484:	e3a0307d 	mov	r3, #125	; 0x7d
						B DISPLAY
 488:	ea000011 	b	4d4 <DISPLAY>

0000048c <IS_SEVEN>:


IS_SEVEN:MOV R3,#0x07
 48c:	e3a03007 	mov	r3, #7
						B DISPLAY
 490:	ea00000f 	b	4d4 <DISPLAY>

00000494 <IS_EIGHT>:


IS_EIGHT:MOV R3,#0x7F
 494:	e3a0307f 	mov	r3, #127	; 0x7f
						B DISPLAY
 498:	ea00000d 	b	4d4 <DISPLAY>

0000049c <IS_NINE>:


IS_NINE:MOV R3,#0x6F
 49c:	e3a0306f 	mov	r3, #111	; 0x6f
						B DISPLAY
 4a0:	ea00000b 	b	4d4 <DISPLAY>

000004a4 <IS_TEN>:


IS_TEN:MOV R3,#0x77
 4a4:	e3a03077 	mov	r3, #119	; 0x77
						B DISPLAY
 4a8:	ea000009 	b	4d4 <DISPLAY>

000004ac <IS_ELEVEN>:


IS_ELEVEN:MOV R3,#0x7C
 4ac:	e3a0307c 	mov	r3, #124	; 0x7c
						B DISPLAY
 4b0:	ea000007 	b	4d4 <DISPLAY>

000004b4 <IS_TWELVE>:


IS_TWELVE:MOV R3,#0x39
 4b4:	e3a03039 	mov	r3, #57	; 0x39
						B DISPLAY
 4b8:	ea000005 	b	4d4 <DISPLAY>

000004bc <IS_THIRTEEN>:


IS_THIRTEEN:MOV R3,#0x5E
 4bc:	e3a0305e 	mov	r3, #94	; 0x5e
						B DISPLAY
 4c0:	ea000003 	b	4d4 <DISPLAY>

000004c4 <IS_FOURTEEN>:


IS_FOURTEEN:MOV R3,#0x79
 4c4:	e3a03079 	mov	r3, #121	; 0x79
						B DISPLAY
 4c8:	ea000001 	b	4d4 <DISPLAY>

000004cc <IS_FIFTEEN>:


IS_FIFTEEN:MOV R3,#0x71
 4cc:	e3a03071 	mov	r3, #113	; 0x71
						B DISPLAY
 4d0:	eaffffff 	b	4d4 <DISPLAY>

000004d4 <DISPLAY>:


DISPLAY:	  //R0 has the input value
                LDR R1, =HEX_BASE_ONE //R1 will have the base address of the display
 4d4:	e59f104c 	ldr	r1, [pc, #76]	; 528 <DONEWRITE+0x8>
                MOV R2,#0 //The counter for the displaY
 4d8:	e3a02000 	mov	r2, #0
				MOV R7,R3
 4dc:	e1a07003 	mov	r7, r3
                MOV R4,#0 // Will hold value of the current displays being lit
 4e0:	e3a04000 	mov	r4, #0

000004e4 <DISPLAY_LOOP>:


DISPLAY_LOOP:   CMP R2, #4
 4e4:	e3520004 	cmp	r2, #4
                LDREQ R1, =HEX_BASE_TWO
 4e8:	059f103c 	ldreq	r1, [pc, #60]	; 52c <DONEWRITE+0xc>
				MOVEQ R3,R7
 4ec:	01a03007 	moveq	r3, r7
				CMP R2,#6
 4f0:	e3520006 	cmp	r2, #6
				BEQ DONEWRITE
 4f4:	0a000009 	beq	520 <DONEWRITE>
//to here

                AND R5,R0,#1 //checks R5 will hold the result if the LSB is 1
 4f8:	e2005001 	and	r5, r0, #1
				ASR R0,R0,#1
 4fc:	e1a000c0 	asr	r0, r0, #1
                CMP R5,#0 //If the LSB is off jump to SHIFT_TO_NEXT_DISPLAY
 500:	e3550000 	cmp	r5, #0
                BEQ SHIFT_TO_NEXT_WRITE_DISPLAY
 504:	0a000002 	beq	514 <SHIFT_TO_NEXT_WRITE_DISPLAY>

                //If the LSB is ON, write to the address to turn it ON
                LDR R6,[R1]
 508:	e5916000 	ldr	r6, [r1]
                ORR R6,R6,R3
 50c:	e1866003 	orr	r6, r6, r3
				STR R6,[R1]
 510:	e5816000 	str	r6, [r1]

00000514 <SHIFT_TO_NEXT_WRITE_DISPLAY>:




SHIFT_TO_NEXT_WRITE_DISPLAY:  LSL R3,#8
 514:	e1a03403 	lsl	r3, r3, #8
                        ADD R2, R2, #1
 518:	e2822001 	add	r2, r2, #1
						B DISPLAY_LOOP
 51c:	eafffff0 	b	4e4 <DISPLAY_LOOP>

00000520 <DONEWRITE>:




DONEWRITE: 	POP {R0-R7,LR}
 520:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
		BX LR
 524:	e12fff1e 	bx	lr

//FLOOD the display

HEX_flood_ASM:  //R0 has the input value
				PUSH {R0-R6,LR}
                LDR R1, =HEX_BASE_ONE //R1 will have the base address of the display
 528:	ff200020 	.word	0xff200020
                MOV R3,#0xFF //The value to light up all display
                MOV R4,#0 // Will hold value of the current displays being lit


FLOOD_LOOP:     CMP R2, #4
                LDREQ R1, =HEX_BASE_TWO
 52c:	ff200030 	.word	0xff200030

00000530 <read_PB_data_ASM>:
        .equ button_base_interruptmask, 0xFF200058
        .equ button_base_edgecapture, 0xFF20005C

//access the push button data registers
read_PB_data_ASM: 
                  LDR R0,=button_base_data
 530:	e59f001c 	ldr	r0, [pc, #28]	; 554 <PB_clear_edgecap_ASM>
                  LDR R0,[R0]
 534:	e5900000 	ldr	r0, [r0]
                  BX LR  
 538:	e12fff1e 	bx	lr

0000053c <PB_data_is_pressed_ASM>:



PB_data_is_pressed_ASM: PUSH {R1}
 53c:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
					  LDR R0,=button_base_data
 540:	e59f000c 	ldr	r0, [pc, #12]	; 554 <PB_clear_edgecap_ASM>
					   LDR R1,=button_base_edgecapture
 544:	e59f100c 	ldr	r1, [pc, #12]	; 558 <PB_clear_edgecap_ASM+0x4>
						MOV R0,R1
 548:	e1a00001 	mov	r0, r1
						POP {R1}
 54c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
						BX LR
 550:	e12fff1e 	bx	lr

00000554 <PB_clear_edgecap_ASM>:
        .equ button_base_interruptmask, 0xFF200058
        .equ button_base_edgecapture, 0xFF20005C

//access the push button data registers
read_PB_data_ASM: 
                  LDR R0,=button_base_data
 554:	ff200050 	.word	0xff200050



PB_data_is_pressed_ASM: PUSH {R1}
					  LDR R0,=button_base_data
					   LDR R1,=button_base_edgecapture
 558:	ff20005c 	.word	0xff20005c

0000055c <atexit>:
 55c:	e1a01000 	mov	r1, r0
 560:	e3a00000 	mov	r0, #0
 564:	e92d4008 	push	{r3, lr}
 568:	e1a02000 	mov	r2, r0
 56c:	e1a03000 	mov	r3, r0
 570:	eb00000e 	bl	5b0 <__register_exitproc>
 574:	e8bd4008 	pop	{r3, lr}
 578:	e12fff1e 	bx	lr

0000057c <exit>:
 57c:	e92d4008 	push	{r3, lr}
 580:	e3a01000 	mov	r1, #0
 584:	e1a04000 	mov	r4, r0
 588:	eb000045 	bl	6a4 <__call_exitprocs>
 58c:	e59f3018 	ldr	r3, [pc, #24]	; 5ac <exit+0x30>
 590:	e5930000 	ldr	r0, [r3]
 594:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 598:	e3530000 	cmp	r3, #0
 59c:	11a0e00f 	movne	lr, pc
 5a0:	112fff13 	bxne	r3
 5a4:	e1a00004 	mov	r0, r4
 5a8:	eb0000c9 	bl	8d4 <_exit>
 5ac:	00000994 	.word	0x00000994

000005b0 <__register_exitproc>:
 5b0:	e59fc0e4 	ldr	r12, [pc, #228]	; 69c <__register_exitproc+0xec>
 5b4:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 5b8:	e59c4000 	ldr	r4, [r12]
 5bc:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 5c0:	e35c0000 	cmp	r12, #0
 5c4:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 5c8:	e59c5004 	ldr	r5, [r12, #4]
 5cc:	0584c148 	streq	r12, [r4, #328]	; 0x148
 5d0:	e355001f 	cmp	r5, #31
 5d4:	e24dd010 	sub	sp, sp, #16
 5d8:	e1a06000 	mov	r6, r0
 5dc:	da000015 	ble	638 <__register_exitproc+0x88>
 5e0:	e59f00b8 	ldr	r0, [pc, #184]	; 6a0 <__register_exitproc+0xf0>
 5e4:	e3500000 	cmp	r0, #0
 5e8:	1a000001 	bne	5f4 <__register_exitproc+0x44>
 5ec:	e3e00000 	mvn	r0, #0
 5f0:	ea000018 	b	658 <__register_exitproc+0xa8>
 5f4:	e3a00e19 	mov	r0, #400	; 0x190
 5f8:	e58d100c 	str	r1, [sp, #12]
 5fc:	e58d2008 	str	r2, [sp, #8]
 600:	e58d3004 	str	r3, [sp, #4]
 604:	e320f000 	nop	{0}
 608:	e250c000 	subs	r12, r0, #0
 60c:	e59d100c 	ldr	r1, [sp, #12]
 610:	e59d2008 	ldr	r2, [sp, #8]
 614:	e59d3004 	ldr	r3, [sp, #4]
 618:	0afffff3 	beq	5ec <__register_exitproc+0x3c>
 61c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 620:	e3a00000 	mov	r0, #0
 624:	e58c0004 	str	r0, [r12, #4]
 628:	e58c5000 	str	r5, [r12]
 62c:	e584c148 	str	r12, [r4, #328]	; 0x148
 630:	e58c0188 	str	r0, [r12, #392]	; 0x188
 634:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 638:	e3560000 	cmp	r6, #0
 63c:	e59c4004 	ldr	r4, [r12, #4]
 640:	1a000007 	bne	664 <__register_exitproc+0xb4>
 644:	e2843002 	add	r3, r4, #2
 648:	e2844001 	add	r4, r4, #1
 64c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 650:	e58c4004 	str	r4, [r12, #4]
 654:	e3a00000 	mov	r0, #0
 658:	e28dd010 	add	sp, sp, #16
 65c:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 660:	e12fff1e 	bx	lr
 664:	e3a00001 	mov	r0, #1
 668:	e1a00410 	lsl	r0, r0, r4
 66c:	e08c8104 	add	r8, r12, r4, lsl #2
 670:	e3560002 	cmp	r6, #2
 674:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 678:	e5883108 	str	r3, [r8, #264]	; 0x108
 67c:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 680:	e1877000 	orr	r7, r7, r0
 684:	01830000 	orreq	r0, r3, r0
 688:	e1a05008 	mov	r5, r8
 68c:	e5882088 	str	r2, [r8, #136]	; 0x88
 690:	e58c7188 	str	r7, [r12, #392]	; 0x188
 694:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 698:	eaffffe9 	b	644 <__register_exitproc+0x94>
 69c:	00000994 	.word	0x00000994
 6a0:	00000000 	.word	0x00000000

000006a4 <__call_exitprocs>:
 6a4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 6a8:	e59f3168 	ldr	r3, [pc, #360]	; 818 <__call_exitprocs+0x174>
 6ac:	e5933000 	ldr	r3, [r3]
 6b0:	e24dd014 	sub	sp, sp, #20
 6b4:	e58d3004 	str	r3, [sp, #4]
 6b8:	e2833f52 	add	r3, r3, #328	; 0x148
 6bc:	e58d0008 	str	r0, [sp, #8]
 6c0:	e58d300c 	str	r3, [sp, #12]
 6c4:	e1a07001 	mov	r7, r1
 6c8:	e3a08001 	mov	r8, #1
 6cc:	e59d3004 	ldr	r3, [sp, #4]
 6d0:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 6d4:	e3560000 	cmp	r6, #0
 6d8:	e59db00c 	ldr	r11, [sp, #12]
 6dc:	0a000033 	beq	7b0 <__call_exitprocs+0x10c>
 6e0:	e5965004 	ldr	r5, [r6, #4]
 6e4:	e2554001 	subs	r4, r5, #1
 6e8:	5286a088 	addpl	r10, r6, #136	; 0x88
 6ec:	5285501f 	addpl	r5, r5, #31
 6f0:	508a5105 	addpl	r5, r10, r5, lsl #2
 6f4:	5a000007 	bpl	718 <__call_exitprocs+0x74>
 6f8:	ea000029 	b	7a4 <__call_exitprocs+0x100>
 6fc:	e5953000 	ldr	r3, [r5]
 700:	e1530007 	cmp	r3, r7
 704:	0a000005 	beq	720 <__call_exitprocs+0x7c>
 708:	e2444001 	sub	r4, r4, #1
 70c:	e3740001 	cmn	r4, #1
 710:	e2455004 	sub	r5, r5, #4
 714:	0a000022 	beq	7a4 <__call_exitprocs+0x100>
 718:	e3570000 	cmp	r7, #0
 71c:	1afffff6 	bne	6fc <__call_exitprocs+0x58>
 720:	e5963004 	ldr	r3, [r6, #4]
 724:	e06a2005 	rsb	r2, r10, r5
 728:	e2433001 	sub	r3, r3, #1
 72c:	e0862002 	add	r2, r6, r2
 730:	e1530004 	cmp	r3, r4
 734:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 738:	13a01000 	movne	r1, #0
 73c:	05864004 	streq	r4, [r6, #4]
 740:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 744:	e3530000 	cmp	r3, #0
 748:	0affffee 	beq	708 <__call_exitprocs+0x64>
 74c:	e1a02418 	lsl	r2, r8, r4
 750:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 754:	e1120001 	tst	r2, r1
 758:	e5969004 	ldr	r9, [r6, #4]
 75c:	0a000016 	beq	7bc <__call_exitprocs+0x118>
 760:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 764:	e1120001 	tst	r2, r1
 768:	1a000016 	bne	7c8 <__call_exitprocs+0x124>
 76c:	e59d0008 	ldr	r0, [sp, #8]
 770:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 774:	e1a0e00f 	mov	lr, pc
 778:	e12fff13 	bx	r3
 77c:	e5963004 	ldr	r3, [r6, #4]
 780:	e1530009 	cmp	r3, r9
 784:	1affffd0 	bne	6cc <__call_exitprocs+0x28>
 788:	e59b3000 	ldr	r3, [r11]
 78c:	e1530006 	cmp	r3, r6
 790:	1affffcd 	bne	6cc <__call_exitprocs+0x28>
 794:	e2444001 	sub	r4, r4, #1
 798:	e3740001 	cmn	r4, #1
 79c:	e2455004 	sub	r5, r5, #4
 7a0:	1affffdc 	bne	718 <__call_exitprocs+0x74>
 7a4:	e59f1070 	ldr	r1, [pc, #112]	; 81c <__call_exitprocs+0x178>
 7a8:	e3510000 	cmp	r1, #0
 7ac:	1a000009 	bne	7d8 <__call_exitprocs+0x134>
 7b0:	e28dd014 	add	sp, sp, #20
 7b4:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 7b8:	e12fff1e 	bx	lr
 7bc:	e1a0e00f 	mov	lr, pc
 7c0:	e12fff13 	bx	r3
 7c4:	eaffffec 	b	77c <__call_exitprocs+0xd8>
 7c8:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 7cc:	e1a0e00f 	mov	lr, pc
 7d0:	e12fff13 	bx	r3
 7d4:	eaffffe8 	b	77c <__call_exitprocs+0xd8>
 7d8:	e5963004 	ldr	r3, [r6, #4]
 7dc:	e3530000 	cmp	r3, #0
 7e0:	e5963000 	ldr	r3, [r6]
 7e4:	1a000008 	bne	80c <__call_exitprocs+0x168>
 7e8:	e3530000 	cmp	r3, #0
 7ec:	0a000006 	beq	80c <__call_exitprocs+0x168>
 7f0:	e1a00006 	mov	r0, r6
 7f4:	e58b3000 	str	r3, [r11]
 7f8:	e320f000 	nop	{0}
 7fc:	e59b6000 	ldr	r6, [r11]
 800:	e3560000 	cmp	r6, #0
 804:	1affffb5 	bne	6e0 <__call_exitprocs+0x3c>
 808:	eaffffe8 	b	7b0 <__call_exitprocs+0x10c>
 80c:	e1a0b006 	mov	r11, r6
 810:	e1a06003 	mov	r6, r3
 814:	eafffff9 	b	800 <__call_exitprocs+0x15c>
 818:	00000994 	.word	0x00000994
 81c:	00000000 	.word	0x00000000

00000820 <register_fini>:
 820:	e92d4008 	push	{r3, lr}
 824:	e59f3010 	ldr	r3, [pc, #16]	; 83c <register_fini+0x1c>
 828:	e3530000 	cmp	r3, #0
 82c:	159f000c 	ldrne	r0, [pc, #12]	; 840 <register_fini+0x20>
 830:	1bffff49 	blne	55c <atexit>
 834:	e8bd4008 	pop	{r3, lr}
 838:	e12fff1e 	bx	lr
 83c:	000009bc 	.word	0x000009bc
 840:	00000844 	.word	0x00000844

00000844 <__libc_fini_array>:
 844:	e92d4038 	push	{r3, r4, r5, lr}
 848:	e59f5030 	ldr	r5, [pc, #48]	; 880 <__libc_fini_array+0x3c>
 84c:	e59f4030 	ldr	r4, [pc, #48]	; 884 <__libc_fini_array+0x40>
 850:	e0654004 	rsb	r4, r5, r4
 854:	e1b04144 	asrs	r4, r4, #2
 858:	10855104 	addne	r5, r5, r4, lsl #2
 85c:	0a000004 	beq	874 <__libc_fini_array+0x30>
 860:	e5353004 	ldr	r3, [r5, #-4]!
 864:	e1a0e00f 	mov	lr, pc
 868:	e12fff13 	bx	r3
 86c:	e2544001 	subs	r4, r4, #1
 870:	1afffffa 	bne	860 <__libc_fini_array+0x1c>
 874:	eb000050 	bl	9bc <__libc_fini>
 878:	e8bd4038 	pop	{r3, r4, r5, lr}
 87c:	e12fff1e 	bx	lr
 880:	000009d4 	.word	0x000009d4
 884:	000009d8 	.word	0x000009d8

00000888 <__cs3_premain>:
 888:	e92d4008 	push	{r3, lr}
 88c:	eb00001d 	bl	908 <__libc_init_array>
 890:	e59f3030 	ldr	r3, [pc, #48]	; 8c8 <__cs3_premain+0x40>
 894:	e3530000 	cmp	r3, #0
 898:	15930000 	ldrne	r0, [r3]
 89c:	01a00003 	moveq	r0, r3
 8a0:	e59f3024 	ldr	r3, [pc, #36]	; 8cc <__cs3_premain+0x44>
 8a4:	e3530000 	cmp	r3, #0
 8a8:	15931000 	ldrne	r1, [r3]
 8ac:	01a01003 	moveq	r1, r3
 8b0:	e3a02000 	mov	r2, #0
 8b4:	ebfffe68 	bl	25c <main>
 8b8:	e59f3010 	ldr	r3, [pc, #16]	; 8d0 <__cs3_premain+0x48>
 8bc:	e3530000 	cmp	r3, #0
 8c0:	1bffff2d 	blne	57c <exit>
 8c4:	eafffffe 	b	8c4 <__cs3_premain+0x3c>
	...
 8d0:	0000057c 	.word	0x0000057c

000008d4 <_exit>:
 8d4:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 8d8:	e3a00018 	mov	r0, #24
 8dc:	e59f1004 	ldr	r1, [pc, #4]	; 8e8 <_exit+0x14>
 8e0:	ef123456 	svc	0x00123456
 8e4:	eafffffe 	b	8e4 <_exit+0x10>
 8e8:	00020026 	.word	0x00020026

000008ec <__cs3_isr_interrupt>:
 8ec:	eafffffe 	b	8ec <__cs3_isr_interrupt>

000008f0 <__cs3_isr_undef>:
 8f0:	eafffffe 	b	8f0 <__cs3_isr_undef>

000008f4 <__cs3_isr_swi>:
 8f4:	eafffffe 	b	8f4 <__cs3_isr_swi>

000008f8 <__cs3_isr_pabort>:
 8f8:	eafffffe 	b	8f8 <__cs3_isr_pabort>

000008fc <__cs3_isr_dabort>:
 8fc:	eafffffe 	b	8fc <__cs3_isr_dabort>

00000900 <__cs3_isr_irq>:
 900:	eafffffe 	b	900 <__cs3_isr_irq>

00000904 <__cs3_isr_fiq>:
 904:	eafffffe 	b	904 <__cs3_isr_fiq>

00000908 <__libc_init_array>:
 908:	e92d4070 	push	{r4, r5, r6, lr}
 90c:	e59f506c 	ldr	r5, [pc, #108]	; 980 <__libc_init_array+0x78>
 910:	e59f606c 	ldr	r6, [pc, #108]	; 984 <__libc_init_array+0x7c>
 914:	e0656006 	rsb	r6, r5, r6
 918:	e1b06146 	asrs	r6, r6, #2
 91c:	12455004 	subne	r5, r5, #4
 920:	13a04000 	movne	r4, #0
 924:	0a000005 	beq	940 <__libc_init_array+0x38>
 928:	e5b53004 	ldr	r3, [r5, #4]!
 92c:	e2844001 	add	r4, r4, #1
 930:	e1a0e00f 	mov	lr, pc
 934:	e12fff13 	bx	r3
 938:	e1560004 	cmp	r6, r4
 93c:	1afffff9 	bne	928 <__libc_init_array+0x20>
 940:	e59f5040 	ldr	r5, [pc, #64]	; 988 <__libc_init_array+0x80>
 944:	e59f6040 	ldr	r6, [pc, #64]	; 98c <__libc_init_array+0x84>
 948:	e0656006 	rsb	r6, r5, r6
 94c:	eb000012 	bl	99c <_init>
 950:	e1b06146 	asrs	r6, r6, #2
 954:	12455004 	subne	r5, r5, #4
 958:	13a04000 	movne	r4, #0
 95c:	0a000005 	beq	978 <__libc_init_array+0x70>
 960:	e5b53004 	ldr	r3, [r5, #4]!
 964:	e2844001 	add	r4, r4, #1
 968:	e1a0e00f 	mov	lr, pc
 96c:	e12fff13 	bx	r3
 970:	e1560004 	cmp	r6, r4
 974:	1afffff9 	bne	960 <__libc_init_array+0x58>
 978:	e8bd4070 	pop	{r4, r5, r6, lr}
 97c:	e12fff1e 	bx	lr
 980:	000009b4 	.word	0x000009b4
 984:	000009b4 	.word	0x000009b4
 988:	000009b4 	.word	0x000009b4
 98c:	000009bc 	.word	0x000009bc

Disassembly of section .rodata:

00000994 <_global_impure_ptr>:
 994:	00000a00 00000043                       ....C...

0000099c <_init>:
 99c:	e1a0c00d 	mov	r12, sp
 9a0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 9a4:	e24cb004 	sub	r11, r12, #4
 9a8:	e24bd028 	sub	sp, r11, #40	; 0x28
 9ac:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 9b0:	e12fff1e 	bx	lr

000009b4 <__init_array_start>:
 9b4:	00000820 	.word	0x00000820

000009b8 <__frame_dummy_init_array_entry>:
 9b8:	00000208                                ....

000009bc <__libc_fini>:
 9bc:	e1a0c00d 	mov	r12, sp
 9c0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 9c4:	e24cb004 	sub	r11, r12, #4
 9c8:	e24bd028 	sub	sp, r11, #40	; 0x28
 9cc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 9d0:	e12fff1e 	bx	lr

000009d4 <__fini_array_start>:
 9d4:	000001c4 	.word	0x000001c4

000009d8 <__cs3_regions>:
 9d8:	00000000 	.word	0x00000000
 9dc:	00000040 	.word	0x00000040
 9e0:	00000040 	.word	0x00000040
 9e4:	00000df0 	.word	0x00000df0
 9e8:	00000020 	.word	0x00000020

000009ec <__cs3_regions_end>:
 9ec:	00000000 	.word	0x00000000

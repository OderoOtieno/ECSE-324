
P:/Lab 4-20181109T204832Z-001/Lab 4/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 04 0a 00 00 08 0a 00 00 0c 0a 00 00     @...............
  30:	10 0a 00 00 00 0a 00 00 14 0a 00 00 18 0a 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb000230 	bl	99c <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000b00 	.word	0x00000b00

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000f38 	.word	0x00000f38

00000124 <__cs3_heap_start_ptr>:
 124:	00000f60 	.word	0x00000f60

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000f40 	.word	0x00000f40
 170:	00000f43 	.word	0x00000f43
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000f40 	.word	0x00000f40
 1bc:	00000f40 	.word	0x00000f40
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000f40 	.word	0x00000f40
 200:	00000000 	.word	0x00000000
 204:	00000aa4 	.word	0x00000aa4

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000aa4 	.word	0x00000aa4
 250:	00000f44 	.word	0x00000f44
 254:	00000b00 	.word	0x00000b00
 258:	00000000 	.word	0x00000000

0000025c <main>:
//write_audio_data_ASM



int main()
{
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd008 	sub	sp, sp, #8
	
	//For 48kHz
	while(1){
	int a = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e50b3008 	str	r3, [r11, #-8]
	int b = 0;
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
		while(a < 240){
 278:	ea000007 	b	29c <main+0x40>
			if(write_audio_data_ASM(0X00FFFFFF)){
 27c:	e3e004ff 	mvn	r0, #-16777216	; 0xff000000
 280:	eb0000e4 	bl	618 <write_audio_data_ASM>
 284:	e1a03000 	mov	r3, r0
 288:	e3530000 	cmp	r3, #0
 28c:	0a000002 	beq	29c <main+0x40>
				a++;
 290:	e51b3008 	ldr	r3, [r11, #-8]
 294:	e2833001 	add	r3, r3, #1
 298:	e50b3008 	str	r3, [r11, #-8]
	
	//For 48kHz
	while(1){
	int a = 0;
	int b = 0;
		while(a < 240){
 29c:	e51b3008 	ldr	r3, [r11, #-8]
 2a0:	e35300ef 	cmp	r3, #239	; 0xef
 2a4:	dafffff4 	ble	27c <main+0x20>
			if(write_audio_data_ASM(0X00FFFFFF)){
				a++;
			}
		}

		while(b < 240){
 2a8:	ea000007 	b	2cc <main+0x70>
			if(write_audio_data_ASM(0X00000000)){
 2ac:	e3a00000 	mov	r0, #0
 2b0:	eb0000d8 	bl	618 <write_audio_data_ASM>
 2b4:	e1a03000 	mov	r3, r0
 2b8:	e3530000 	cmp	r3, #0
 2bc:	0a000002 	beq	2cc <main+0x70>
				b++;
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e2833001 	add	r3, r3, #1
 2c8:	e50b300c 	str	r3, [r11, #-12]
			if(write_audio_data_ASM(0X00FFFFFF)){
				a++;
			}
		}

		while(b < 240){
 2cc:	e51b300c 	ldr	r3, [r11, #-12]
 2d0:	e35300ef 	cmp	r3, #239	; 0xef
 2d4:	dafffff4 	ble	2ac <main+0x50>
			if(write_audio_data_ASM(0X00000000)){
				b++;
			}
		}
		}
 2d8:	eaffffe2 	b	268 <main+0xc>

000002dc <read_PB_data_ASM>:
    .equ button_base_interruptmask, 0xFF200058
    .equ button_base_edgecapture, 0xFF20005C

//access the push button data registers
read_PB_data_ASM: 
                  LDR R0,=button_base_data
 2dc:	e59f0090 	ldr	r0, [pc, #144]	; 374 <disable_PB_INT_ASM+0x8>
                  LDR R0,[R0]
 2e0:	e5900000 	ldr	r0, [r0]
                  BX LR  
 2e4:	e12fff1e 	bx	lr

000002e8 <PB_data_is_pressed_ASM>:



PB_data_is_pressed_ASM: PUSH {R1}
 2e8:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
					  LDR R1,=button_base_data
 2ec:	e59f1080 	ldr	r1, [pc, #128]	; 374 <disable_PB_INT_ASM+0x8>
                      LDR R1,[R1]
 2f0:	e5911000 	ldr	r1, [r1]
                      AND R1,R1,R0
 2f4:	e0011000 	and	r1, r1, r0
                      CMP R1,R0
 2f8:	e1510000 	cmp	r1, r0
                      MOVNE R0,#0
 2fc:	13a00000 	movne	r0, #0
                      MOVEQ R0,#1
 300:	03a00001 	moveq	r0, #1
                      POP {R1}
 304:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
                      BX LR
 308:	e12fff1e 	bx	lr

0000030c <read_PB_edgecap_ASM>:
					
						


read_PB_edgecap_ASM:
                    LDR R0,=button_base_edgecapture
 30c:	e59f0064 	ldr	r0, [pc, #100]	; 378 <disable_PB_INT_ASM+0xc>
                    LDR R0,[R0]
 310:	e5900000 	ldr	r0, [r0]
                    BX LR
 314:	e12fff1e 	bx	lr

00000318 <PB_edgecap_is_pressed_ASM>:


PB_edgecap_is_pressed_ASM:  PUSH {R1}
 318:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
                            LDR R1,=button_base_edgecapture
 31c:	e59f1054 	ldr	r1, [pc, #84]	; 378 <disable_PB_INT_ASM+0xc>
                            LDR R1,[R1]
 320:	e5911000 	ldr	r1, [r1]
                            AND R1, R1,#0xF //represents 1111 when theres only 4 buttons
 324:	e201100f 	and	r1, r1, #15
                            CMP R1,R0
 328:	e1510000 	cmp	r1, r0
                            MOVNE R0,#0
 32c:	13a00000 	movne	r0, #0
                            MOVEQ R0,#1
 330:	03a00001 	moveq	r0, #1
                            POP {R1}
 334:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
                            BX LR
 338:	e12fff1e 	bx	lr

0000033c <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:   PUSH {R1,R2}
 33c:	e92d0006 	push	{r1, r2}
                        LDR R1,= button_base_edgecapture
 340:	e59f1030 	ldr	r1, [pc, #48]	; 378 <disable_PB_INT_ASM+0xc>
                        MOV R2,#1
 344:	e3a02001 	mov	r2, #1
                        STR R2,[R1]
 348:	e5812000 	str	r2, [r1]
                        POP {R1,R2}
 34c:	e8bd0006 	pop	{r1, r2}
                        BX LR
 350:	e12fff1e 	bx	lr

00000354 <enable_PB_INT_ASM>:




enable_PB_INT_ASM: PUSH {R1}
 354:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
                    LDR R1, =button_base_interruptmask
 358:	e59f101c 	ldr	r1, [pc, #28]	; 37c <disable_PB_INT_ASM+0x10>
                    AND R0, R0, #0xF
 35c:	e200000f 	and	r0, r0, #15
                    STR R0,[R1]
 360:	e5810000 	str	r0, [r1]
                    POP {R1}
 364:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
                    BX LR
 368:	e12fff1e 	bx	lr

0000036c <disable_PB_INT_ASM>:




disable_PB_INT_ASM: LDR R0, =button_base_interruptmask
 36c:	e59f0008 	ldr	r0, [pc, #8]	; 37c <disable_PB_INT_ASM+0x10>
                    LDR R0,[R0]
 370:	e5900000 	ldr	r0, [r0]
    .equ button_base_interruptmask, 0xFF200058
    .equ button_base_edgecapture, 0xFF20005C

//access the push button data registers
read_PB_data_ASM: 
                  LDR R0,=button_base_data
 374:	ff200050 	.word	0xff200050
					
						


read_PB_edgecap_ASM:
                    LDR R0,=button_base_edgecapture
 378:	ff20005c 	.word	0xff20005c




enable_PB_INT_ASM: PUSH {R1}
                    LDR R1, =button_base_interruptmask
 37c:	ff200058 	.word	0xff200058

00000380 <read_slider_switches_ASM>:
		.text
		.equ SW_BASE, 0xFF200040
		
		.global read_slider_switches_ASM
		
read_slider_switches_ASM:	PUSH {R1}
 380:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
							LDR R1,=SW_BASE
 384:	e59f1008 	ldr	r1, [pc, #8]	; 394 <read_slider_switches_ASM+0x14>
							LDR R0,[R1]
 388:	e5910000 	ldr	r0, [r1]
							POP {R1}
 38c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
							BX LR
 390:	e12fff1e 	bx	lr
		.equ SW_BASE, 0xFF200040
		
		.global read_slider_switches_ASM
		
read_slider_switches_ASM:	PUSH {R1}
							LDR R1,=SW_BASE
 394:	ff200040 	.word	0xff200040

00000398 <VGA_clear_pixelbuff_ASM>:
		.global VGA_write_byte_ASM

		.global VGA_draw_point_ASM

        
VGA_clear_pixelbuff_ASM:  PUSH {R0-R7,LR}
 398:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
						LDR R0,=VGA_PIXEL_BUFFER
 39c:	e3a00332 	mov	r0, #-939524096	; 0xc8000000
                        MOV R1, #0 //x
 3a0:	e3a01000 	mov	r1, #0
                        MOV R2, #0 //y       
 3a4:	e3a02000 	mov	r2, #0

000003a8 <CLEAR_PIXEL_ROW>:

CLEAR_PIXEL_ROW:		CMP R1,#320
 3a8:	e3510d05 	cmp	r1, #320	; 0x140
                        ADD R3,R1,#0 // clone of R1
 3ac:	e2813000 	add	r3, r1, #0
                        LSL R3,#1
 3b0:	e1a03083 	lsl	r3, r3, #1
						ADD R7,R0,#0
 3b4:	e2807000 	add	r7, r0, #0
                        ADD R7,R3,R7
 3b8:	e0837007 	add	r7, r3, r7
                        BLT CLEAR_PIXEL_COLUMN //clear column by column
 3bc:	ba000000 	blt	3c4 <CLEAR_PIXEL_COLUMN>
                        BEQ DONE_PIXEL_CLEAR
 3c0:	0a00000b 	beq	3f4 <DONE_PIXEL_CLEAR>

000003c4 <CLEAR_PIXEL_COLUMN>:

CLEAR_PIXEL_COLUMN:

			CMP R2,#240
 3c4:	e35200f0 	cmp	r2, #240	; 0xf0
			MOVEQ R2,#0
 3c8:	03a02000 	moveq	r2, #0
			ADDEQ R1,R1,#1
 3cc:	02811001 	addeq	r1, r1, #1
			BEQ CLEAR_PIXEL_ROW
 3d0:	0afffff4 	beq	3a8 <CLEAR_PIXEL_ROW>
			ADD R4,R7,#0 //copy of R0
 3d4:	e2874000 	add	r4, r7, #0
			ADD R5,R2,#0
 3d8:	e2825000 	add	r5, r2, #0
			LSL R5,#10
 3dc:	e1a05505 	lsl	r5, r5, #10
			ADD R4,R4,R5
 3e0:	e0844005 	add	r4, r4, r5
			MOV R6,#0x0
 3e4:	e3a06000 	mov	r6, #0
			STRH R6,[R4]
 3e8:	e1c460b0 	strh	r6, [r4]
			ADDLT R2,R2,#1
 3ec:	b2822001 	addlt	r2, r2, #1
			B CLEAR_PIXEL_COLUMN
 3f0:	eafffff3 	b	3c4 <CLEAR_PIXEL_COLUMN>

000003f4 <DONE_PIXEL_CLEAR>:
			
DONE_PIXEL_CLEAR: POP {R0-R7,LR}
 3f4:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
				BX LR
 3f8:	e12fff1e 	bx	lr

000003fc <VGA_clear_charbuff_ASM>:





VGA_clear_charbuff_ASM: PUSH {R0-R7,LR}
 3fc:	e92d40ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
						LDR R0,=VGA_CHAR_BUFFER
 400:	e3a004c9 	mov	r0, #-922746880	; 0xc9000000
                        MOV R1, #0 //x
 404:	e3a01000 	mov	r1, #0
                        MOV R2, #0 //y       
 408:	e3a02000 	mov	r2, #0

0000040c <CLEAR_CHAR_ROW>:
CLEAR_CHAR_ROW:   
                        CMP R1,#80
 40c:	e3510050 	cmp	r1, #80	; 0x50
                        ADD R3,R1,#0 // clone of R1
 410:	e2813000 	add	r3, r1, #0
                        //LSL R3,#1
						ADD R7,R0,#0
 414:	e2807000 	add	r7, r0, #0
                        ADD R7,R3,R7
 418:	e0837007 	add	r7, r3, r7
                        BLT CLEAR_CHAR_COLUMN //clear column by column
 41c:	ba000000 	blt	424 <CLEAR_CHAR_COLUMN>
                        BEQ DONE_CHAR_CLEAR
 420:	0a00000b 	beq	454 <DONE_CHAR_CLEAR>

00000424 <CLEAR_CHAR_COLUMN>:

CLEAR_CHAR_COLUMN:      CMP R2,#60
 424:	e352003c 	cmp	r2, #60	; 0x3c
			MOVEQ R2,#0
 428:	03a02000 	moveq	r2, #0
			ADDEQ R1,R1,#1
 42c:	02811001 	addeq	r1, r1, #1
			BEQ CLEAR_CHAR_ROW
 430:	0afffff5 	beq	40c <CLEAR_CHAR_ROW>
			ADD R4,R7,#0 //copy of R0
 434:	e2874000 	add	r4, r7, #0
			ADD R5,R2,#0
 438:	e2825000 	add	r5, r2, #0
			LSL R5,#7
 43c:	e1a05385 	lsl	r5, r5, #7
			ADD R4,R4,R5
 440:	e0844005 	add	r4, r4, r5
			MOV R6,#0x0
 444:	e3a06000 	mov	r6, #0
			STRB R6,[R4]
 448:	e5c46000 	strb	r6, [r4]
			ADDLT R2,R2,#1
 44c:	b2822001 	addlt	r2, r2, #1
			B CLEAR_CHAR_COLUMN
 450:	eafffff3 	b	424 <CLEAR_CHAR_COLUMN>

00000454 <DONE_CHAR_CLEAR>:
			
DONE_CHAR_CLEAR: POP {R0-R7,LR}
 454:	e8bd40ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
				BX LR
 458:	e12fff1e 	bx	lr

0000045c <VGA_write_char_ASM>:


VGA_write_char_ASM: //R0 has x
                //R1 has y
                //R2 has char c 
                PUSH {R0-R3,LR}
 45c:	e92d400f 	push	{r0, r1, r2, r3, lr}

                //X
                CMP R0,#0
 460:	e3500000 	cmp	r0, #0
                BLT WRITE_CHAR_DONE
 464:	ba00000a 	blt	494 <WRITE_CHAR_DONE>
                CMP R0,#80
 468:	e3500050 	cmp	r0, #80	; 0x50
                BGE WRITE_CHAR_DONE
 46c:	aa000008 	bge	494 <WRITE_CHAR_DONE>

                //Y
                CMP R1,#0
 470:	e3510000 	cmp	r1, #0
                BLT WRITE_CHAR_DONE
 474:	ba000006 	blt	494 <WRITE_CHAR_DONE>
                CMP R1,#60
 478:	e351003c 	cmp	r1, #60	; 0x3c
                BGE WRITE_CHAR_DONE
 47c:	aa000004 	bge	494 <WRITE_CHAR_DONE>


                LDR R3,=VGA_CHAR_BUFFER
 480:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
                LSL R1,#7
 484:	e1a01381 	lsl	r1, r1, #7
                ADD R3,R3,R0
 488:	e0833000 	add	r3, r3, r0
                ADD R3,R3,R1
 48c:	e0833001 	add	r3, r3, r1

                STRB R2,[R3]
 490:	e5c32000 	strb	r2, [r3]

00000494 <WRITE_CHAR_DONE>:


WRITE_CHAR_DONE:POP {R0-R3,LR}
 494:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
                BX LR      
 498:	e12fff1e 	bx	lr

0000049c <VGA_write_byte_ASM>:

VGA_write_byte_ASM://R0 has x
                  //R1 has y
                //R2 has byte

				PUSH {R0-R9,LR}
 49c:	e92d43ff 	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}

                //X
                CMP R0,#0
 4a0:	e3500000 	cmp	r0, #0
                BLT WRITE_BYTE_DONE
 4a4:	ba00003c 	blt	59c <WRITE_BYTE_DONE>
                CMP R0,#80
 4a8:	e3500050 	cmp	r0, #80	; 0x50
                BGE WRITE_BYTE_DONE
 4ac:	aa00003a 	bge	59c <WRITE_BYTE_DONE>


                //Y
                CMP R1,#0
 4b0:	e3510000 	cmp	r1, #0
                BLT WRITE_BYTE_DONE
 4b4:	ba000038 	blt	59c <WRITE_BYTE_DONE>
                CMP R1,#60
 4b8:	e351003c 	cmp	r1, #60	; 0x3c
                BGE WRITE_BYTE_DONE
 4bc:	aa000036 	bge	59c <WRITE_BYTE_DONE>
                

                LDR R3,=VGA_CHAR_BUFFER //address
 4c0:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
                MOV R4,R3 //copy of address
 4c4:	e1a04003 	mov	r4, r3
                LSL R1,#7 //shift y by 7 bits
 4c8:	e1a01381 	lsl	r1, r1, #7
                ADD R5,R0,#1 //Copy of x with +1 for extra char
 4cc:	e2805001 	add	r5, r0, #1

                //make the new address 1 with x and y
                ADD R3,R0,R3
 4d0:	e0803003 	add	r3, r0, r3
                ADD R3,R1,R3
 4d4:	e0813003 	add	r3, r1, r3

                //make the new address 2 with x+1 and y
                ADD R4,R5,R4 //add the new X
 4d8:	e0854004 	add	r4, r5, r4
                ADD R4,R1,R4 //add the new Y
 4dc:	e0814004 	add	r4, r1, r4
				
				MOV R6,#0
 4e0:	e3a06000 	mov	r6, #0
                STR R2,[R6]
 4e4:	e5862000 	str	r2, [r6]
                LDRH R7,[R6] //load half word content into R7
 4e8:	e1d670b0 	ldrh	r7, [r6]
                AND R8, R7,#0xF //second byte to display
 4ec:	e207800f 	and	r8, r7, #15
                ASR R7,R7,#4 //First byte to display
 4f0:	e1a07247 	asr	r7, r7, #4

                MOV R9,R7
 4f4:	e1a09007 	mov	r9, r7
                BL GEN_CHAR
 4f8:	eb000004 	bl	510 <GEN_CHAR>
                STRB R9, [R3]
 4fc:	e5c39000 	strb	r9, [r3]

                MOV R9,R8
 500:	e1a09008 	mov	r9, r8
                BL GEN_CHAR
 504:	eb000001 	bl	510 <GEN_CHAR>
                STRB R9, [R4]
 508:	e5c49000 	strb	r9, [r4]

                B WRITE_BYTE_DONE
 50c:	ea000022 	b	59c <WRITE_BYTE_DONE>

00000510 <GEN_CHAR>:


GEN_CHAR:       
                CMP R9, #0x0
 510:	e3590000 	cmp	r9, #0
				MOVEQ R9, #48
 514:	03a09030 	moveq	r9, #48	; 0x30

                CMP R9, #0x1
 518:	e3590001 	cmp	r9, #1
                MOVEQ R9, #49
 51c:	03a09031 	moveq	r9, #49	; 0x31

                 CMP R9, #0x2
 520:	e3590002 	cmp	r9, #2
                MOVEQ R9, #50
 524:	03a09032 	moveq	r9, #50	; 0x32

                CMP R9, #0x3
 528:	e3590003 	cmp	r9, #3
                MOVEQ R9, #51
 52c:	03a09033 	moveq	r9, #51	; 0x33

                 CMP R9, #0x4
 530:	e3590004 	cmp	r9, #4
                MOVEQ R9, #52
 534:	03a09034 	moveq	r9, #52	; 0x34

                CMP R9, #0x5
 538:	e3590005 	cmp	r9, #5
                MOVEQ R9, #53
 53c:	03a09035 	moveq	r9, #53	; 0x35

                 CMP R9, #0x6
 540:	e3590006 	cmp	r9, #6
                MOVEQ R9, #54
 544:	03a09036 	moveq	r9, #54	; 0x36

                CMP R9, #0x7
 548:	e3590007 	cmp	r9, #7
                MOVEQ R9, #55
 54c:	03a09037 	moveq	r9, #55	; 0x37

                CMP R9, #0x8
 550:	e3590008 	cmp	r9, #8
                MOVEQ R9, #56
 554:	03a09038 	moveq	r9, #56	; 0x38

                CMP R9, #0x9
 558:	e3590009 	cmp	r9, #9
                MOVEQ R9, #57
 55c:	03a09039 	moveq	r9, #57	; 0x39

                CMP R9, #0xA
 560:	e359000a 	cmp	r9, #10
                MOVEQ R9, #65
 564:	03a09041 	moveq	r9, #65	; 0x41

                CMP R9, #0xB
 568:	e359000b 	cmp	r9, #11
                MOVEQ R9, #66
 56c:	03a09042 	moveq	r9, #66	; 0x42

                CMP R9, #0xC
 570:	e359000c 	cmp	r9, #12
                MOVEQ R9, #67
 574:	03a09043 	moveq	r9, #67	; 0x43

                CMP R9, #0xD
 578:	e359000d 	cmp	r9, #13
                MOVEQ R9, #68
 57c:	03a09044 	moveq	r9, #68	; 0x44

                CMP R9, #0xE
 580:	e359000e 	cmp	r9, #14
                MOVEQ R9, #69
 584:	03a09045 	moveq	r9, #69	; 0x45

                CMP R9, #0xF
 588:	e359000f 	cmp	r9, #15
                MOVEQ R9, #70
 58c:	03a09046 	moveq	r9, #70	; 0x46
				
				CMP R9, #0x0
 590:	e3590000 	cmp	r9, #0
				MOVEQ R9, #48
 594:	03a09030 	moveq	r9, #48	; 0x30

                BX LR
 598:	e12fff1e 	bx	lr

0000059c <WRITE_BYTE_DONE>:


WRITE_BYTE_DONE: POP {R0-R9,LR}
 59c:	e8bd43ff 	pop	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
                BX LR
 5a0:	e12fff1e 	bx	lr

000005a4 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
                //R0 has x
                //R1 has y
                //R2 has char c 
                PUSH {R0-R3,LR}
 5a4:	e92d400f 	push	{r0, r1, r2, r3, lr}

                //X
                CMP R0,#0
 5a8:	e3500000 	cmp	r0, #0
                BLT WRITE_CHAR_DONE
 5ac:	baffffb8 	blt	494 <WRITE_CHAR_DONE>
                CMP R0,#320
 5b0:	e3500d05 	cmp	r0, #320	; 0x140
                BGE WRITE_CHAR_DONE
 5b4:	aaffffb6 	bge	494 <WRITE_CHAR_DONE>
				LSL R0,#1
 5b8:	e1a00080 	lsl	r0, r0, #1
                //Y
                CMP R1,#0
 5bc:	e3510000 	cmp	r1, #0
                BLT WRITE_CHAR_DONE
 5c0:	baffffb3 	blt	494 <WRITE_CHAR_DONE>
                CMP R1,#240
 5c4:	e35100f0 	cmp	r1, #240	; 0xf0
                BGE WRITE_CHAR_DONE
 5c8:	aaffffb1 	bge	494 <WRITE_CHAR_DONE>


                LDR R3,=VGA_PIXEL_BUFFER
 5cc:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
                LSL R1,#10
 5d0:	e1a01501 	lsl	r1, r1, #10
                ADD R3,R3,R0
 5d4:	e0833000 	add	r3, r3, r0
                ADD R3,R3,R1
 5d8:	e0833001 	add	r3, r3, r1
				
                STRH R2,[R3]
 5dc:	e1c320b0 	strh	r2, [r3]

000005e0 <WRITE_DRAW_DONE>:


WRITE_DRAW_DONE:POP {R0-R3,LR}
 5e0:	e8bd400f 	pop	{r0, r1, r2, r3, lr}
                BX LR    
 5e4:	e12fff1e 	bx	lr

000005e8 <read_PS2_data_ASM>:
			.text
			.equ PS2_base, 0xFF200100
			.global read_PS2_data_ASM

read_PS2_data_ASM:
			LDR R1, =PS2_base 
 5e8:	e59f1024 	ldr	r1, [pc, #36]	; 614 <END+0x4>
			LDR R2, [R1] 
 5ec:	e5912000 	ldr	r2, [r1]
			AND R3, R2, #0x8000 
 5f0:	e2023902 	and	r3, r2, #32768	; 0x8000

			CMP R3, #0x8000
 5f4:	e3530902 	cmp	r3, #32768	; 0x8000
			MOVEQ R4,R2
 5f8:	01a04002 	moveq	r4, r2
			STREQB R4,[R0]
 5fc:	05c04000 	strbeq	r4, [r0]
			MOVEQ R0,#1
 600:	03a00001 	moveq	r0, #1
			
			BEQ END
 604:	0a000001 	beq	610 <END>
			
			
			MOV R0, #0
 608:	e3a00000 	mov	r0, #0
			BEQ END			
 60c:	0affffff 	beq	610 <END>

00000610 <END>:

END:		BX LR
 610:	e12fff1e 	bx	lr
			.text
			.equ PS2_base, 0xFF200100
			.global read_PS2_data_ASM

read_PS2_data_ASM:
			LDR R1, =PS2_base 
 614:	ff200100 	.word	0xff200100

00000618 <write_audio_data_ASM>:
	.equ Rightdata,	0xFF20304C//Typo in the paper. Corrected.


write_audio_data_ASM:

					 LDR R2, =Fifospace
 618:	e59f2044 	ldr	r2, [pc, #68]	; 664 <END+0x4>
					 LDR R3, [R2]       //load the value from Fifospace 
 61c:	e5923000 	ldr	r3, [r2]
		 			 LSR R3, R3, #16
 620:	e1a03823 	lsr	r3, r3, #16
         			 MOV R4, R3   //R4 holds the value of the WSRC and WSLC
 624:	e1a04003 	mov	r4, r3

					 LDRB R5, [R4]		    // Half word: stores value of WSRC
 628:	e5d45000 	ldrb	r5, [r4]

		 			 LSR R4, R4, #8		//R4 holds the value of WSLC
 62c:	e1a04424 	lsr	r4, r4, #8

		 			 LDRB R6, [R4]         //R6 stores value of WSLC 
 630:	e5d46000 	ldrb	r6, [r4]

		 			 CMP R5,#0              //check the avalibility of WSRC (whether have space
 634:	e3550000 	cmp	r5, #0
         			 BEQ No_Space           
 638:	0a000007 	beq	65c <No_Space>
                     CMP R6,#0              //check the avalibility of WSLC (whether have space
 63c:	e3560000 	cmp	r6, #0
         			 BEQ No_Space           
 640:	0a000005 	beq	65c <No_Space>


		 			 LDR R7,=Leftdata		//get the address of Leftdata
 644:	e59f701c 	ldr	r7, [pc, #28]	; 668 <END+0x8>
         			 LDR R8,=Rightdata		//get the address of Rightdata
 648:	e59f801c 	ldr	r8, [pc, #28]	; 66c <END+0xc>
         			 STR R0,[R7]			//store the value 
 64c:	e5870000 	str	r0, [r7]
         			 STR R0,[R8]			//store the value
 650:	e5880000 	str	r0, [r8]
         			 MOV R0, #1				//return 1 
 654:	e3a00001 	mov	r0, #1
		 			 B END
 658:	ea000000 	b	660 <END>

0000065c <No_Space>:
		 
No_Space:
					 MOV R0, #0				//return 0 
 65c:	e3a00000 	mov	r0, #0

00000660 <END>:
END:				 BX LR
 660:	e12fff1e 	bx	lr
	.equ Rightdata,	0xFF20304C//Typo in the paper. Corrected.


write_audio_data_ASM:

					 LDR R2, =Fifospace
 664:	ff203044 	.word	0xff203044
         			 BEQ No_Space           
                     CMP R6,#0              //check the avalibility of WSLC (whether have space
         			 BEQ No_Space           


		 			 LDR R7,=Leftdata		//get the address of Leftdata
 668:	ff203048 	.word	0xff203048
         			 LDR R8,=Rightdata		//get the address of Rightdata
 66c:	ff20304c 	.word	0xff20304c

00000670 <atexit>:
 670:	e1a01000 	mov	r1, r0
 674:	e3a00000 	mov	r0, #0
 678:	e92d4008 	push	{r3, lr}
 67c:	e1a02000 	mov	r2, r0
 680:	e1a03000 	mov	r3, r0
 684:	eb00000e 	bl	6c4 <__register_exitproc>
 688:	e8bd4008 	pop	{r3, lr}
 68c:	e12fff1e 	bx	lr

00000690 <exit>:
 690:	e92d4008 	push	{r3, lr}
 694:	e3a01000 	mov	r1, #0
 698:	e1a04000 	mov	r4, r0
 69c:	eb000045 	bl	7b8 <__call_exitprocs>
 6a0:	e59f3018 	ldr	r3, [pc, #24]	; 6c0 <exit+0x30>
 6a4:	e5930000 	ldr	r0, [r3]
 6a8:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 6ac:	e3530000 	cmp	r3, #0
 6b0:	11a0e00f 	movne	lr, pc
 6b4:	112fff13 	bxne	r3
 6b8:	e1a00004 	mov	r0, r4
 6bc:	eb0000c9 	bl	9e8 <_exit>
 6c0:	00000aa8 	.word	0x00000aa8

000006c4 <__register_exitproc>:
 6c4:	e59fc0e4 	ldr	r12, [pc, #228]	; 7b0 <__register_exitproc+0xec>
 6c8:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 6cc:	e59c4000 	ldr	r4, [r12]
 6d0:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 6d4:	e35c0000 	cmp	r12, #0
 6d8:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 6dc:	e59c5004 	ldr	r5, [r12, #4]
 6e0:	0584c148 	streq	r12, [r4, #328]	; 0x148
 6e4:	e355001f 	cmp	r5, #31
 6e8:	e24dd010 	sub	sp, sp, #16
 6ec:	e1a06000 	mov	r6, r0
 6f0:	da000015 	ble	74c <__register_exitproc+0x88>
 6f4:	e59f00b8 	ldr	r0, [pc, #184]	; 7b4 <__register_exitproc+0xf0>
 6f8:	e3500000 	cmp	r0, #0
 6fc:	1a000001 	bne	708 <__register_exitproc+0x44>
 700:	e3e00000 	mvn	r0, #0
 704:	ea000018 	b	76c <__register_exitproc+0xa8>
 708:	e3a00e19 	mov	r0, #400	; 0x190
 70c:	e58d100c 	str	r1, [sp, #12]
 710:	e58d2008 	str	r2, [sp, #8]
 714:	e58d3004 	str	r3, [sp, #4]
 718:	e320f000 	nop	{0}
 71c:	e250c000 	subs	r12, r0, #0
 720:	e59d100c 	ldr	r1, [sp, #12]
 724:	e59d2008 	ldr	r2, [sp, #8]
 728:	e59d3004 	ldr	r3, [sp, #4]
 72c:	0afffff3 	beq	700 <__register_exitproc+0x3c>
 730:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 734:	e3a00000 	mov	r0, #0
 738:	e58c0004 	str	r0, [r12, #4]
 73c:	e58c5000 	str	r5, [r12]
 740:	e584c148 	str	r12, [r4, #328]	; 0x148
 744:	e58c0188 	str	r0, [r12, #392]	; 0x188
 748:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 74c:	e3560000 	cmp	r6, #0
 750:	e59c4004 	ldr	r4, [r12, #4]
 754:	1a000007 	bne	778 <__register_exitproc+0xb4>
 758:	e2843002 	add	r3, r4, #2
 75c:	e2844001 	add	r4, r4, #1
 760:	e78c1103 	str	r1, [r12, r3, lsl #2]
 764:	e58c4004 	str	r4, [r12, #4]
 768:	e3a00000 	mov	r0, #0
 76c:	e28dd010 	add	sp, sp, #16
 770:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 774:	e12fff1e 	bx	lr
 778:	e3a00001 	mov	r0, #1
 77c:	e1a00410 	lsl	r0, r0, r4
 780:	e08c8104 	add	r8, r12, r4, lsl #2
 784:	e3560002 	cmp	r6, #2
 788:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 78c:	e5883108 	str	r3, [r8, #264]	; 0x108
 790:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 794:	e1877000 	orr	r7, r7, r0
 798:	01830000 	orreq	r0, r3, r0
 79c:	e1a05008 	mov	r5, r8
 7a0:	e5882088 	str	r2, [r8, #136]	; 0x88
 7a4:	e58c7188 	str	r7, [r12, #392]	; 0x188
 7a8:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 7ac:	eaffffe9 	b	758 <__register_exitproc+0x94>
 7b0:	00000aa8 	.word	0x00000aa8
 7b4:	00000000 	.word	0x00000000

000007b8 <__call_exitprocs>:
 7b8:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 7bc:	e59f3168 	ldr	r3, [pc, #360]	; 92c <__call_exitprocs+0x174>
 7c0:	e5933000 	ldr	r3, [r3]
 7c4:	e24dd014 	sub	sp, sp, #20
 7c8:	e58d3004 	str	r3, [sp, #4]
 7cc:	e2833f52 	add	r3, r3, #328	; 0x148
 7d0:	e58d0008 	str	r0, [sp, #8]
 7d4:	e58d300c 	str	r3, [sp, #12]
 7d8:	e1a07001 	mov	r7, r1
 7dc:	e3a08001 	mov	r8, #1
 7e0:	e59d3004 	ldr	r3, [sp, #4]
 7e4:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 7e8:	e3560000 	cmp	r6, #0
 7ec:	e59db00c 	ldr	r11, [sp, #12]
 7f0:	0a000033 	beq	8c4 <__call_exitprocs+0x10c>
 7f4:	e5965004 	ldr	r5, [r6, #4]
 7f8:	e2554001 	subs	r4, r5, #1
 7fc:	5286a088 	addpl	r10, r6, #136	; 0x88
 800:	5285501f 	addpl	r5, r5, #31
 804:	508a5105 	addpl	r5, r10, r5, lsl #2
 808:	5a000007 	bpl	82c <__call_exitprocs+0x74>
 80c:	ea000029 	b	8b8 <__call_exitprocs+0x100>
 810:	e5953000 	ldr	r3, [r5]
 814:	e1530007 	cmp	r3, r7
 818:	0a000005 	beq	834 <__call_exitprocs+0x7c>
 81c:	e2444001 	sub	r4, r4, #1
 820:	e3740001 	cmn	r4, #1
 824:	e2455004 	sub	r5, r5, #4
 828:	0a000022 	beq	8b8 <__call_exitprocs+0x100>
 82c:	e3570000 	cmp	r7, #0
 830:	1afffff6 	bne	810 <__call_exitprocs+0x58>
 834:	e5963004 	ldr	r3, [r6, #4]
 838:	e06a2005 	rsb	r2, r10, r5
 83c:	e2433001 	sub	r3, r3, #1
 840:	e0862002 	add	r2, r6, r2
 844:	e1530004 	cmp	r3, r4
 848:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 84c:	13a01000 	movne	r1, #0
 850:	05864004 	streq	r4, [r6, #4]
 854:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 858:	e3530000 	cmp	r3, #0
 85c:	0affffee 	beq	81c <__call_exitprocs+0x64>
 860:	e1a02418 	lsl	r2, r8, r4
 864:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 868:	e1120001 	tst	r2, r1
 86c:	e5969004 	ldr	r9, [r6, #4]
 870:	0a000016 	beq	8d0 <__call_exitprocs+0x118>
 874:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 878:	e1120001 	tst	r2, r1
 87c:	1a000016 	bne	8dc <__call_exitprocs+0x124>
 880:	e59d0008 	ldr	r0, [sp, #8]
 884:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 888:	e1a0e00f 	mov	lr, pc
 88c:	e12fff13 	bx	r3
 890:	e5963004 	ldr	r3, [r6, #4]
 894:	e1530009 	cmp	r3, r9
 898:	1affffd0 	bne	7e0 <__call_exitprocs+0x28>
 89c:	e59b3000 	ldr	r3, [r11]
 8a0:	e1530006 	cmp	r3, r6
 8a4:	1affffcd 	bne	7e0 <__call_exitprocs+0x28>
 8a8:	e2444001 	sub	r4, r4, #1
 8ac:	e3740001 	cmn	r4, #1
 8b0:	e2455004 	sub	r5, r5, #4
 8b4:	1affffdc 	bne	82c <__call_exitprocs+0x74>
 8b8:	e59f1070 	ldr	r1, [pc, #112]	; 930 <__call_exitprocs+0x178>
 8bc:	e3510000 	cmp	r1, #0
 8c0:	1a000009 	bne	8ec <__call_exitprocs+0x134>
 8c4:	e28dd014 	add	sp, sp, #20
 8c8:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 8cc:	e12fff1e 	bx	lr
 8d0:	e1a0e00f 	mov	lr, pc
 8d4:	e12fff13 	bx	r3
 8d8:	eaffffec 	b	890 <__call_exitprocs+0xd8>
 8dc:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 8e0:	e1a0e00f 	mov	lr, pc
 8e4:	e12fff13 	bx	r3
 8e8:	eaffffe8 	b	890 <__call_exitprocs+0xd8>
 8ec:	e5963004 	ldr	r3, [r6, #4]
 8f0:	e3530000 	cmp	r3, #0
 8f4:	e5963000 	ldr	r3, [r6]
 8f8:	1a000008 	bne	920 <__call_exitprocs+0x168>
 8fc:	e3530000 	cmp	r3, #0
 900:	0a000006 	beq	920 <__call_exitprocs+0x168>
 904:	e1a00006 	mov	r0, r6
 908:	e58b3000 	str	r3, [r11]
 90c:	e320f000 	nop	{0}
 910:	e59b6000 	ldr	r6, [r11]
 914:	e3560000 	cmp	r6, #0
 918:	1affffb5 	bne	7f4 <__call_exitprocs+0x3c>
 91c:	eaffffe8 	b	8c4 <__call_exitprocs+0x10c>
 920:	e1a0b006 	mov	r11, r6
 924:	e1a06003 	mov	r6, r3
 928:	eafffff9 	b	914 <__call_exitprocs+0x15c>
 92c:	00000aa8 	.word	0x00000aa8
 930:	00000000 	.word	0x00000000

00000934 <register_fini>:
 934:	e92d4008 	push	{r3, lr}
 938:	e59f3010 	ldr	r3, [pc, #16]	; 950 <register_fini+0x1c>
 93c:	e3530000 	cmp	r3, #0
 940:	159f000c 	ldrne	r0, [pc, #12]	; 954 <register_fini+0x20>
 944:	1bffff49 	blne	670 <atexit>
 948:	e8bd4008 	pop	{r3, lr}
 94c:	e12fff1e 	bx	lr
 950:	00000ad0 	.word	0x00000ad0
 954:	00000958 	.word	0x00000958

00000958 <__libc_fini_array>:
 958:	e92d4038 	push	{r3, r4, r5, lr}
 95c:	e59f5030 	ldr	r5, [pc, #48]	; 994 <__libc_fini_array+0x3c>
 960:	e59f4030 	ldr	r4, [pc, #48]	; 998 <__libc_fini_array+0x40>
 964:	e0654004 	rsb	r4, r5, r4
 968:	e1b04144 	asrs	r4, r4, #2
 96c:	10855104 	addne	r5, r5, r4, lsl #2
 970:	0a000004 	beq	988 <__libc_fini_array+0x30>
 974:	e5353004 	ldr	r3, [r5, #-4]!
 978:	e1a0e00f 	mov	lr, pc
 97c:	e12fff13 	bx	r3
 980:	e2544001 	subs	r4, r4, #1
 984:	1afffffa 	bne	974 <__libc_fini_array+0x1c>
 988:	eb000050 	bl	ad0 <__libc_fini>
 98c:	e8bd4038 	pop	{r3, r4, r5, lr}
 990:	e12fff1e 	bx	lr
 994:	00000ae8 	.word	0x00000ae8
 998:	00000aec 	.word	0x00000aec

0000099c <__cs3_premain>:
 99c:	e92d4008 	push	{r3, lr}
 9a0:	eb00001d 	bl	a1c <__libc_init_array>
 9a4:	e59f3030 	ldr	r3, [pc, #48]	; 9dc <__cs3_premain+0x40>
 9a8:	e3530000 	cmp	r3, #0
 9ac:	15930000 	ldrne	r0, [r3]
 9b0:	01a00003 	moveq	r0, r3
 9b4:	e59f3024 	ldr	r3, [pc, #36]	; 9e0 <__cs3_premain+0x44>
 9b8:	e3530000 	cmp	r3, #0
 9bc:	15931000 	ldrne	r1, [r3]
 9c0:	01a01003 	moveq	r1, r3
 9c4:	e3a02000 	mov	r2, #0
 9c8:	ebfffe23 	bl	25c <main>
 9cc:	e59f3010 	ldr	r3, [pc, #16]	; 9e4 <__cs3_premain+0x48>
 9d0:	e3530000 	cmp	r3, #0
 9d4:	1bffff2d 	blne	690 <exit>
 9d8:	eafffffe 	b	9d8 <__cs3_premain+0x3c>
	...
 9e4:	00000690 	.word	0x00000690

000009e8 <_exit>:
 9e8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 9ec:	e3a00018 	mov	r0, #24
 9f0:	e59f1004 	ldr	r1, [pc, #4]	; 9fc <_exit+0x14>
 9f4:	ef123456 	svc	0x00123456
 9f8:	eafffffe 	b	9f8 <_exit+0x10>
 9fc:	00020026 	.word	0x00020026

00000a00 <__cs3_isr_interrupt>:
 a00:	eafffffe 	b	a00 <__cs3_isr_interrupt>

00000a04 <__cs3_isr_undef>:
 a04:	eafffffe 	b	a04 <__cs3_isr_undef>

00000a08 <__cs3_isr_swi>:
 a08:	eafffffe 	b	a08 <__cs3_isr_swi>

00000a0c <__cs3_isr_pabort>:
 a0c:	eafffffe 	b	a0c <__cs3_isr_pabort>

00000a10 <__cs3_isr_dabort>:
 a10:	eafffffe 	b	a10 <__cs3_isr_dabort>

00000a14 <__cs3_isr_irq>:
 a14:	eafffffe 	b	a14 <__cs3_isr_irq>

00000a18 <__cs3_isr_fiq>:
 a18:	eafffffe 	b	a18 <__cs3_isr_fiq>

00000a1c <__libc_init_array>:
 a1c:	e92d4070 	push	{r4, r5, r6, lr}
 a20:	e59f506c 	ldr	r5, [pc, #108]	; a94 <__libc_init_array+0x78>
 a24:	e59f606c 	ldr	r6, [pc, #108]	; a98 <__libc_init_array+0x7c>
 a28:	e0656006 	rsb	r6, r5, r6
 a2c:	e1b06146 	asrs	r6, r6, #2
 a30:	12455004 	subne	r5, r5, #4
 a34:	13a04000 	movne	r4, #0
 a38:	0a000005 	beq	a54 <__libc_init_array+0x38>
 a3c:	e5b53004 	ldr	r3, [r5, #4]!
 a40:	e2844001 	add	r4, r4, #1
 a44:	e1a0e00f 	mov	lr, pc
 a48:	e12fff13 	bx	r3
 a4c:	e1560004 	cmp	r6, r4
 a50:	1afffff9 	bne	a3c <__libc_init_array+0x20>
 a54:	e59f5040 	ldr	r5, [pc, #64]	; a9c <__libc_init_array+0x80>
 a58:	e59f6040 	ldr	r6, [pc, #64]	; aa0 <__libc_init_array+0x84>
 a5c:	e0656006 	rsb	r6, r5, r6
 a60:	eb000012 	bl	ab0 <_init>
 a64:	e1b06146 	asrs	r6, r6, #2
 a68:	12455004 	subne	r5, r5, #4
 a6c:	13a04000 	movne	r4, #0
 a70:	0a000005 	beq	a8c <__libc_init_array+0x70>
 a74:	e5b53004 	ldr	r3, [r5, #4]!
 a78:	e2844001 	add	r4, r4, #1
 a7c:	e1a0e00f 	mov	lr, pc
 a80:	e12fff13 	bx	r3
 a84:	e1560004 	cmp	r6, r4
 a88:	1afffff9 	bne	a74 <__libc_init_array+0x58>
 a8c:	e8bd4070 	pop	{r4, r5, r6, lr}
 a90:	e12fff1e 	bx	lr
 a94:	00000ac8 	.word	0x00000ac8
 a98:	00000ac8 	.word	0x00000ac8
 a9c:	00000ac8 	.word	0x00000ac8
 aa0:	00000ad0 	.word	0x00000ad0

Disassembly of section .rodata:

00000aa8 <_global_impure_ptr>:
 aa8:	00000b10 00000043                       ....C...

00000ab0 <_init>:
 ab0:	e1a0c00d 	mov	r12, sp
 ab4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ab8:	e24cb004 	sub	r11, r12, #4
 abc:	e24bd028 	sub	sp, r11, #40	; 0x28
 ac0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 ac4:	e12fff1e 	bx	lr

00000ac8 <__init_array_start>:
 ac8:	00000934 	.word	0x00000934

00000acc <__frame_dummy_init_array_entry>:
 acc:	00000208                                ....

00000ad0 <__libc_fini>:
 ad0:	e1a0c00d 	mov	r12, sp
 ad4:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 ad8:	e24cb004 	sub	r11, r12, #4
 adc:	e24bd028 	sub	sp, r11, #40	; 0x28
 ae0:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 ae4:	e12fff1e 	bx	lr

00000ae8 <__fini_array_start>:
 ae8:	000001c4 	.word	0x000001c4

00000aec <__cs3_regions>:
 aec:	00000000 	.word	0x00000000
 af0:	00000040 	.word	0x00000040
 af4:	00000040 	.word	0x00000040
 af8:	00000f00 	.word	0x00000f00
 afc:	00000020 	.word	0x00000020
